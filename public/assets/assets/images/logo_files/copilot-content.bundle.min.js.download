this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,o,n,i,a,s,r,d,l,h,c,C,p,g,u,m){"use strict";const T="im-add-to-chat-hint-popup";const _={name:"AddToChatHint",components:{MessengerPopup:p.MessengerPopup},props:{bindElement:{type:Object,required:true}},emits:["close","hide"],computed:{POPUP_ID:()=>T,config(){return{darkMode:true,bindElement:this.bindElement,angle:true,width:346,closeIcon:true,offsetLeft:8,className:"bx-im-copilot-add-to-chat-hint__scope",contentBorderRadius:0}}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<MessengerPopup\n\t\t\tv-slot="{enableAutoHide, disableAutoHide}"\n\t\t\t:config="config"\n\t\t\t@close="$emit('close')"\n\t\t\t:id="POPUP_ID"\n\t\t>\n\t\t\t<div class="bx-im-copilot-add-to-chat-hint__title">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_TITLE') }}\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<div class="bx-im-copilot-add-to-chat-hint__description">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_DESCRIPTION') }}\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<button class="bx-im-copilot-add-to-chat-hint__hide" @click="$emit('hide')">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_HIDE') }}\n\t\t\t</button>\n\t\t</MessengerPopup>\n\t`};const I={name:"AddToChatButton",components:{AddToChat:s.AddToChat,AddToChatHint:_},props:{dialogId:{type:String,default:""}},data(){return{showInviteButton:false,showAddToChatPopup:false,showAddToChatHint:false}},mounted(){this.showAddToChatHint=r.PromoManager.getInstance().needToShow(g.PromoId.addUsersToCopilotChat)},methods:{openAddToChatPopup(){d.Analytics.getInstance().userAdd.onChatHeaderClick(this.dialogId);this.showAddToChatPopup=true},closeAddToChatPopup(){this.showAddToChatPopup=false},showHint(){this.showAddToChatHint=true},closeHint(){this.showAddToChatHint=false},onHintHide(){void r.PromoManager.getInstance().markAsWatched(g.PromoId.addUsersToCopilotChat);this.closeHint()},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div\n\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_INVITE_POPUP_TITLE')"\n\t\t\t:class="{'--active': showAddToChatPopup}"\n\t\t\tclass="bx-im-chat-header__icon --add-people"\n\t\t\t@click="openAddToChatPopup"\n\t\t\tref="add-members"\n\t\t>\n\t\t\t<slot name="invite-hint" :inviteButtonRef="$refs['add-members']"></slot>\n\t\t</div>\n\t\t<AddToChat\n\t\t\tv-if="showAddToChatPopup"\n\t\t\t:bindElement="$refs['add-members'] ?? {}"\n\t\t\t:dialogId="dialogId"\n\t\t\t:popupConfig="{ offsetTop: 15, offsetLeft: -300 }"\n\t\t\t@close="closeAddToChatPopup"\n\t\t/>\n\t\t<AddToChatHint\n\t\t\tv-if="showAddToChatHint"\n\t\t\t:bindElement="$refs['add-members'] ?? {}"\n\t\t\t@close="closeHint"\n\t\t\t@hide="onHintHide"\n\t\t/>\n\t`};const v={name:"CopilotChatHeader",components:{ChatHeader:a.ChatHeader,EditableChatTitle:p.EditableChatTitle,ChatAvatar:p.ChatAvatar,AddToChatButton:I},inject:["currentSidebarPanel"],props:{dialogId:{type:String,default:""}},data(){return{buttonPanelReady:false}},computed:{AvatarSize:()=>p.AvatarSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isInited(){return this.dialog.inited},isGroupCopilotChat(){return this.dialog.userCounter>2},copilotRole(){var t;const e=this.$store.getters["copilot/chats/getRole"](this.dialogId);return(t=e==null?void 0:e.name)!=null?t:""},formattedUserCounter(){return n.Loc.getMessagePlural("IM_CONTENT_COPILOT_HEADER_USER_COUNT",this.dialog.userCounter,{"#COUNT#":this.dialog.userCounter})}},methods:{onNewTitleSubmit(t){this.getChatService().renameChat(this.dialogId,t).catch((()=>{BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_CHAT_HEADER_RENAME_ERROR")})}))},onMembersClick(){if(!this.isInited){return}if(this.currentSidebarPanel===g.SidebarDetailBlock.members){i.EventEmitter.emit(g.EventType.sidebar.close,{panel:g.SidebarDetailBlock.members});return}i.EventEmitter.emit(g.EventType.sidebar.open,{panel:g.SidebarDetailBlock.members,dialogId:this.dialogId})},onButtonPanelReady(){this.buttonPanelReady=true},getChatService(){if(!this.chatService){this.chatService=new m.ChatService}return this.chatService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<ChatHeader\n\t\t\t:dialogId="dialogId"\n\t\t\t:withSearchButton="false"\n\t\t\tclass="bx-im-copilot-header__container"\n\t\t\t@buttonPanelReady="onButtonPanelReady"\n\t\t>\n\t\t\t<template #left>\n\t\t\t\t<div class="bx-im-copilot-header__avatar">\n\t\t\t\t\t<ChatAvatar\n\t\t\t\t\t\t:avatarDialogId="dialogId"\n\t\t\t\t\t\t:contextDialogId="dialogId"\n\t\t\t\t\t\t:withSpecialTypes="false"\n\t\t\t\t\t\t:size="AvatarSize.L"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-copilot-header__info">\n\t\t\t\t\t<EditableChatTitle :dialogId="dialogId" @newTitleSubmit="onNewTitleSubmit" />\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-if="isGroupCopilotChat"\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COPILOT_HEADER_OPEN_MEMBERS_TITLE')"\n\t\t\t\t\t\t@click="onMembersClick"\n\t\t\t\t\t\tclass="bx-im-copilot-header__subtitle --click"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ formattedUserCounter }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else class="bx-im-copilot-header__subtitle">\n\t\t\t\t\t\t{{ copilotRole }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t<template v-if="buttonPanelReady" #add-to-chat-button>\n\t\t\t\t<AddToChatButton :dialogId="dialogId" />\n\t\t\t</template>\n\t\t</ChatHeader>\n\t`};const E={name:"CopilotTextarea",components:{ChatTextarea:h.ChatTextarea},props:{dialogId:{type:String,default:""}},computed:{CopilotDraftManager:()=>c.CopilotDraftManager},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ChatTextarea\n\t\t\t:dialogId="dialogId"\n\t\t\t:placeholder="this.loc('IM_CONTENT_COPILOT_TEXTAREA_PLACEHOLDER')"\n\t\t\t:withCreateMenu="false"\n\t\t\t:withMarket="false"\n\t\t\t:withEdit="false"\n\t\t\t:withUploadMenu="false"\n\t\t\t:withSmileSelector="false"\n\t\t\t:draftManagerClass="CopilotDraftManager"\n\t\t/>\n\t`};const f=4;const M={name:"CopilotInternalContent",components:{BaseChatContent:a.BaseChatContent,CopilotChatHeader:v,CopilotTextarea:E},props:{dialogId:{type:String,default:""}},computed:{COPILOT_BACKGROUND_ID:()=>f},template:`\n\t\t<BaseChatContent :dialogId="dialogId" :backgroundId="COPILOT_BACKGROUND_ID">\n\t\t\t<template #header>\n\t\t\t\t<CopilotChatHeader :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t<CopilotTextarea :dialogId="dialogId" :key="dialogId" @mounted="onTextareaMount" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const S="#fff";const b="#eee";const A="rgba(82, 92, 105, 0.9)";const y={name:"EmptyState",components:{ChatButton:p.Button,CopilotRolesDialog:p.CopilotRolesDialog},data(){return{isCreatingChat:false,showRolesDialog:false}},computed:{ButtonSize:()=>p.ButtonSize,backgroundStyle(){return u.ThemeManager.getBackgroundStyleById(f)},preparedText(){return this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_MESSAGE_MSGVER_1",{"#BR#":"\n"})},buttonColorScheme(){return{borderColor:g.Color.transparent,backgroundColor:S,iconColor:A,textColor:A,hoverColor:b}}},methods:{onCreateChatClick(){this.showRolesDialog=true},async createChat(t){const e=t.code;this.isCreatingChat=true;this.showRolesDialog=false;const o=await this.getCopilotService().createChat({roleCode:e}).catch((()=>{this.isCreatingChat=false;this.showCreateChatError()}));this.isCreatingChat=false;void C.Messenger.openCopilot(o)},showCreateChatError(){BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_ERROR_CREATING_CHAT")})},getCopilotService(){if(!this.copilotService){this.copilotService=new m.CopilotService}return this.copilotService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-content-copilot-empty-state__container" :style="backgroundStyle">\n\t\t\t<div class="bx-im-content-copilot-empty-state__content">\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__icon"></div>\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__text">{{ preparedText }}</div>\n\t\t\t\t<ChatButton\n\t\t\t\t\tclass="--black-loader"\n\t\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t\t:text="loc('IM_CONTENT_COPILOT_EMPTY_STATE_ASK_QUESTION')"\n\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t:isLoading="isCreatingChat"\n\t\t\t\t\t@click="onCreateChatClick"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<CopilotRolesDialog \n\t\t\t\tv-if="showRolesDialog"\n\t\t\t\t@selectRole="createChat"\n\t\t\t\t@close="showRolesDialog = false"\n\t\t\t/>\n\t\t</div>\n\t`};const B={name:"CopilotContent",components:{EmptyState:y,CopilotInternalContent:M},props:{entityId:{type:String,default:""},contextMessageId:{type:Number,default:0}},data(){return{}},computed:{layout(){return this.$store.getters["application/getLayout"]},dialog(){return this.$store.getters["chats/get"](this.entityId,true)}},watch:{entityId(t,o){e.Logger.warn(`CopilotContent: switching from ${o||"empty"} to ${t}`);this.onChatChange()}},created(){if(!this.entityId){return}this.onChatChange()},methods:{async onChatChange(){if(this.entityId===""){return}if(this.dialog.inited){e.Logger.warn(`CopilotContent: chat ${this.entityId} is already loaded`);d.Analytics.getInstance().onOpenChat(this.dialog);return}if(this.dialog.loading){e.Logger.warn(`CopilotContent: chat ${this.entityId} is loading`);return}if(this.layout.contextId){await this.loadChatWithContext();d.Analytics.getInstance().onOpenChat(this.dialog);return}await this.loadChat();d.Analytics.getInstance().onOpenChat(this.dialog)},async loadChatWithContext(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId} with context - ${this.layout.contextId}`);await this.getChatService().loadChatWithContext(this.entityId,this.layout.contextId).catch((t=>{if(t.code==="ACCESS_ERROR"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR_MSGVER_1"))}e.Logger.error(t);C.Messenger.openCopilot()}));e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded with context of ${this.layout.contextId}`);return Promise.resolve()},async loadChat(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId}`);await this.getChatService().loadChatWithMessages(this.entityId).catch((t=>{const[e]=t;if(e.code==="ACCESS_DENIED"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR_MSGVER_1"))}C.Messenger.openCopilot()}));e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded`);return Promise.resolve()},showNotification(t){BX.UI.Notification.Center.notify({content:t})},getChatService(){if(!this.chatService){this.chatService=new m.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<EmptyState v-if="!entityId" />\n\t\t<CopilotInternalContent v-else :dialogId="entityId" />\n\t`};t.CopilotContent=B})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX.Messenger.v2.Lib,BX,BX,BX.Event,BX.Messenger.v2.Component.Content,BX.Messenger.v2.Component.EntitySelector,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Main,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Service);
//# sourceMappingURL=copilot-content.bundle.map.js